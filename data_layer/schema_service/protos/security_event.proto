syntax = "proto3";

package netguardian.schema;

option java_package = "com.netguardian.schema";
option java_multiple_files = true;
option go_package = "github.com/netguardian/schema";

import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";

// Version information for schema evolution
message SchemaVersion {
  int32 major = 1;
  int32 minor = 2;
  int32 patch = 3;
}

// Security event types
enum EventType {
  EVENT_TYPE_UNSPECIFIED = 0;
  INTRUSION_ATTEMPT = 1;
  MALWARE_DETECTION = 2;
  RECONNAISSANCE = 3;
  DATA_EXFILTRATION = 4;
  CREDENTIAL_ACCESS = 5;
  LATERAL_MOVEMENT = 6;
  PRIVILEGE_ESCALATION = 7;
  PERSISTENCE = 8;
  DEFENSE_EVASION = 9;
  COMMAND_AND_CONTROL = 10;
  IMPACT = 11;
  OTHER = 12;
}

// Network protocol
enum Protocol {
  PROTOCOL_UNSPECIFIED = 0;
  TCP = 1;
  UDP = 2;
  ICMP = 3;
  HTTP = 4;
  HTTPS = 5;
  DNS = 6;
  FTP = 7;
  SSH = 8;
  TELNET = 9;
  SMTP = 10;
  RDP = 11;
  SMB = 12;
  LDAP = 13;
  NTP = 14;
  OTHER_PROTOCOL = 15;
}

// Network address information
message NetworkAddress {
  string ip_address = 1;
  uint32 port = 2;
  string mac_address = 3;
  string hostname = 4;
  string country = 5;
  string asn = 6;
  string org = 7;
}

// Security event
message SecurityEvent {
  // Schema version for backward compatibility
  SchemaVersion schema_version = 1;
  
  // Core event fields
  string event_id = 2;
  google.protobuf.Timestamp timestamp = 3;
  EventType event_type = 4;
  uint32 severity = 5;  // 1-10
  uint32 confidence = 6;  // 1-10
  string description = 7;
  
  // Network information
  NetworkAddress source = 8;
  NetworkAddress destination = 9;
  Protocol protocol = 10;
  
  // Asset information
  string asset_id = 11;
  string network_segment = 12;
  
  // Raw data and processing information
  google.protobuf.Struct raw_data = 13;
  string processed_by = 14;
  
  // Detection details
  repeated string detection_signatures = 15;
  repeated string mitre_techniques = 16;
  repeated string tags = 17;
  
  // Additional context
  google.protobuf.Struct context = 18;
}

// Alert derived from security events
message SecurityAlert {
  string alert_id = 1;
  google.protobuf.Timestamp timestamp = 2;
  string title = 3;
  uint32 severity = 4;  // 1-10
  string description = 5;
  repeated string related_event_ids = 6;
  string status = 7;  // NEW, INVESTIGATING, RESOLVED, FALSE_POSITIVE
  string assigned_to = 8;
  google.protobuf.Timestamp resolution_time = 9;
  string resolution_details = 10;
  google.protobuf.Struct context = 11;
  repeated string tags = 12;
}

// Batch of security events
message SecurityEventBatch {
  repeated SecurityEvent events = 1;
}

// Service definition for security events
service SecurityEventService {
  // Store a single security event
  rpc StoreEvent(SecurityEvent) returns (EventResponse);
  
  // Store multiple security events in batch
  rpc StoreBatchEvents(SecurityEventBatch) returns (BatchEventResponse);
  
  // Query events with filters
  rpc QueryEvents(EventQuery) returns (EventQueryResponse);
  
  // Get a specific event by ID
  rpc GetEvent(EventRequest) returns (SecurityEvent);
}

// Request to get a specific event
message EventRequest {
  string event_id = 1;
}

// Response after storing an event
message EventResponse {
  string event_id = 1;
  bool success = 2;
  string error_message = 3;
}

// Response after storing batch events
message BatchEventResponse {
  repeated string event_ids = 1;
  int32 success_count = 2;
  int32 failure_count = 3;
  repeated string error_messages = 4;
}

// Query for events
message EventQuery {
  google.protobuf.Timestamp start_time = 1;
  google.protobuf.Timestamp end_time = 2;
  repeated EventType event_types = 3;
  uint32 min_severity = 4;
  string source_ip = 5;
  string destination_ip = 6;
  Protocol protocol = 7;
  string network_segment = 8;
  string asset_id = 9;
  repeated string tags = 10;
  uint32 limit = 11;
  uint32 offset = 12;
} 